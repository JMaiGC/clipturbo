name: MacOS Test

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-13]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -el {0}

    permissions:
      id-token: write
      contents: write
      attestations: write

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.GH_REPOSITORY }}
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          lfs: true
          ref: macos

      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4
        with:
          cache: true
          python-version: 3.12

      - name: Cache Conda
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }} }}

      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ./.venv
          python-version: 3.12
          use-only-tar-bz2: true

      - name: Setup Dependencies
        run: |
          conda activate ./.venv
          conda info
          conda install -y -c conda-forge pycairo cairo
          brew install create-dmg

      - name: Cache Project Cache
        uses: actions/cache@v4
        with:
          path: |
            .cache
          key: ${{ runner.os }}-${{ runner.arch }}-clipturbo

      - name: Install Dependencies
        run: |
          pdm install && pdm run setup
          pdm run nuitka --version

      - name: Set Nightly Version
        shell: bash
        run: |
          CURRENT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' pyproject.toml)
          BASE_VERSION=$(echo $CURRENT_VERSION | sed -E 's/(-[a-zA-Z]+\.[0-9]+)$//')
          NIGHTLY_DATE=$(date +'%Y%m%d')
          NIGHTLY_VERSION="${BASE_VERSION}-nightly.${NIGHTLY_DATE}"
          echo "NIGHTLY_VERSION=$NIGHTLY_VERSION" >> $GITHUB_ENV
          # Update version in pyproject.toml
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            sed -i "s/version = \".*\"/version = \"$NIGHTLY_VERSION\"/" pyproject.toml
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/version = \".*\"/version = \"$NIGHTLY_VERSION\"/" pyproject.toml
          else
            sed -i "s/version = \".*\"/version = \"$NIGHTLY_VERSION\"/" pyproject.toml
          fi

      - name: Setup Environment Variables
        shell: bash
        run: |
          echo "NUITKA_CACHE_DIR=$GITHUB_WORKSPACE/nuitka/cache" >> $GITHUB_ENV
          echo "PYTHON_VERSION=$(python --version | awk '{print $2}' | cut -d '.' -f 1,2)" >> $GITHUB_ENV

      - name: Cache Nuitka Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-python-${{ env.PYTHON_VERSION }}-nuitka-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-python-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Build With Nuitka
        shell: bash
        run: |
          pdm run build:x86 --dmg

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}
          path: |
            dist/*.dmg
          retention-days: 7

      - name: Generate Artifact Attestation
        continue-on-error: true
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/*.dmg
